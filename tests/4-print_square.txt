============================
How to Use 4-print_square.py
============================

This module defines a function `print_square(size)` that prints a square made of `#` characters with the specified size.

Usage
=====

The function `print_square(size)` takes an integer `size` as input and prints a square of `#` characters with the given size.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(4)
    ####
    ####
    ####
    ####

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

If `size` is zero, the function does not print anything.

::

    >>> print_square(0)

Invalid Sizes
=============

The `size` parameter must be an integer. If a non-integer value is provided, a TypeError is raised.

::

    >>> print_square("not an int")
    Traceback (most recent call last):
    TypeError: size must be an integer

::

    >>> print_square(5.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

If `size` is less than zero, a ValueError is raised.

::

    >>> print_square(-7)
    Traceback (most recent call last):
    ValueError: size must be >= 0

Note that type-checking occurs before value-checking.

::

    >>> print_square(-7.5)
    Traceback (most recent call last):
    TypeError: size must be an integer

The function requires at least one argument.

::

    >>> print_square()
    Traceback (most recent call last):
    TypeError: print_square() missing 1 required positional argument: 'size'
