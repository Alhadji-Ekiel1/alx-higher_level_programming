>>> add_integer = __import__('0-add_integer').add_integer

>>> add_integer(2, 3)
5

>>> add_integer(2, -3)
-1

>>> add_integer(2.0, 3.0)
5

>>> add_integer(2.9, 0.2)
2

>>> add_integer(-2.9, -0.2)
-2

>>> add_integer(2.3, -3)
-1
>>> add_integer(2)
100

Non-Integer Arguments
The function expects both arguments to be integers or floats.
If either argument is a non-integer and non-float, it raises a TypeError

>>> add_integer("hello", 3)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2, "hello")
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer(None)
Traceback (most recent call last):
TypeError: a must be an integer

>>> add_integer(2.3, None)
Traceback (most recent call last):
TypeError: b must be an integer

>>> add_integer("hello", "there")
Traceback (most recent call last):
TypeError: a must be an integer

Handling Infinity and NaN
The function raises an OverflowError if it encounters infinity
>>> add_integer(float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

And raises a ValueError for NaN values:

>>> add_integer(float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer

These errors also occur if infinity or NaN is used as the second argument.

>>> add_integer(2, float('inf'))
Traceback (most recent call last):
OverflowError: cannot convert float infinity to integer

>>> add_integer(2, float('nan'))
Traceback (most recent call last):
ValueError: cannot convert float NaN to integer
