"""
===========================
How to Use 0-add_integer.py
===========================

here we define an integer addition function `add_integer(a, b=98)`where b at default is 98.

Usage
=====

`add_integer(...)` returns the sum of its two arguments. For numerical values,
this result is equivalent to using the `+` operator.

::

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 3)
    5

::

    >>> add_integer(2, -3)
    -1

The function also handles floating-point numbers.

::

    >>> add_integer(2.0, 3.0)
    5

Note that floats are converted to integers before addition.

::

    >>> add_integer(2.9, 0.2)
    2

::

    >>> add_integer(-2.9, -0.2)
    -2

Floating-point and non-floating-point values can be combined.

::

    >>> add_integer(2.3, -3)
    -1

The second argument is optional, defaulting to 98.

::

    >>> add_integer(2)
    100

Non-Numerical Arguments
========================

`add_integer()` expects both arguments to be either integers or floats.
If either argument is a non-integer and non-float, it raises a TypeError:

::

    >>> add_integer("hello", 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2, "hello")
    Traceback (most recent call last):
    TypeError: b must be an integer

::

    >>> add_integer(None)
    Traceback (most recent call last):
    TypeError: a must be an integer

::

    >>> add_integer(2.3, None)
    Traceback (most recent call last):
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a TypeError is raised only for the first argument.

::

    >>> add_integer("hello", "there")
    Traceback (most recent call last):
    TypeError: a must be an integer

The function will raise an OverflowError if infinity is provided.

::

    >>> add_integer(float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

::

    >>> add_integer(2, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer

The function will also raise a ValueError if NaN numbers are provided.

::

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

::

    >>> add_integer(2, float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer
"""
